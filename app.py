from dash import Dash, dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
from generator.wiki_parser import get_clean_article, split_into_sections
from generator.summarizer import smart_conclusion
from generator.image_fetcher import fetch_image_urls_bing
from generator.report_maker import generate_report
from generator.presentation_maker import generate_presentation
from generator.summarizer import smart_conclusion_human_style
from flask import send_from_directory
import os


app = Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])
server = app.server
DOWNLOAD_DIR = os.getcwd()
@server.route("/download/<path:filename>")
def download_file(filename):
    return send_from_directory(DOWNLOAD_DIR, filename, as_attachment=True)
app.layout = dbc.Container([
    html.Br(),
    dbc.Row([
        dbc.Col([
            html.H2("üß† –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫–ª–∞–¥–æ–≤ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π", className="text-center text-primary mb-4"),
            dbc.Card([
                dbc.CardBody([

                    # –¢–µ–º–∞
                    html.Div([
                        html.Label("üìù –¢–µ–º–∞"),
                        dcc.Input(
                            id="topic",
                            type="text",
                            value="–ö–æ—Å–º–æ—Å",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É...",
                            className="form-control"
                        )
                    ], className="mb-3"),

                    # –ß—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                    html.Div([
                        html.Label("üìÑ –ß—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:"),
                        dbc.RadioItems(
                            id="mode",
                            options=[
                                {"label": "–î–æ–∫–ª–∞–¥", "value": "report"},
                                {"label": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "value": "presentation"},
                                {"label": "–û–±–∞", "value": "both"}
                            ],
                            value="both",
                            inline=True
                        )
                    ], className="mb-3"),

                    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    html.Div([
                        html.Label("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:"),
                        dcc.Dropdown(
                            options=[
                                {"label": "–ö—Ä–∞—Ç–∫–∏–π", "value": "–∫—Ä–∞—Ç–∫–∏–π"},
                                {"label": "–°—Ä–µ–¥–Ω–∏–π", "value": "—Å—Ä–µ–¥–Ω–∏–π"},
                                {"label": "–ü–æ–¥—Ä–æ–±–Ω—ã–π", "value": "–ø–æ–¥—Ä–æ–±–Ω—ã–π"}
                            ],
                            value="—Å—Ä–µ–¥–Ω–∏–π",
                            id="detail",
                            className="mb-3"
                        )
                    ], className="mb-3"),

                    # –ö–æ–ª-–≤–æ —Å–ª–∞–π–¥–æ–≤
                    html.Div([
                        html.Label("üìä –ö–æ–ª-–≤–æ —Å–ª–∞–π–¥–æ–≤ (–µ—Å–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è):"),
                        dcc.Input(
                            id="slides",
                            type="number",
                            value=8,
                            min=5,
                            max=15,
                            className="form-control"
                        )
                    ], className="mb-3"),

                    # –ö–Ω–æ–ø–∫–∞
                    dbc.Button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", id="generate", color="primary", className="w-100")
                ])
            ], className="shadow-sm")
        ], width=6)
    ], justify="center"),

    html.Br(),

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    dbc.Row([
        dbc.Col(
            dbc.Alert(id="output", color="success", is_open=False, dismissable=True),
            width=6
        )
    ], justify="center")
], fluid=True)


@app.callback(
    Output("output", "children"),
    Output("output", "is_open"),
    Input("generate", "n_clicks"),
    State("topic", "value"),
    State("mode", "value"),
    State("detail", "value"),
    State("slides", "value"),
)
def run_generator(n, topic, mode, detail, slides):
    if not n:
        return "", False

    text = get_clean_article(topic)
    if not text:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é —Å –í–∏–∫–∏–ø–µ–¥–∏–∏.", True

    intro = text[:400]
    sections = split_into_sections(text, slides - 3)
    conclusion = smart_conclusion_human_style(topic, sections)
    buttons = []

    if mode in ["report", "both"]:
        generate_report(topic, intro, sections, conclusion)
        buttons.append(
            dbc.Button("üìÑ –°–∫–∞—á–∞—Ç—å –¥–æ–∫–ª–∞–¥ (.docx)", href=f"/download/{topic}_report.docx", color="secondary", className="me-2", target="_blank")
        )

    if mode in ["presentation", "both"]:
        image_urls = fetch_image_urls_bing(topic, len(sections))
        generate_presentation(topic, intro, sections, conclusion, image_urls)
        buttons.append(
            dbc.Button("üìä –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (.pptx)", href=f"/download/{topic}_presentation.pptx", color="info", target="_blank")
        )

    return dbc.ButtonGroup(buttons, className="mt-3"), True




if __name__ == "__main__":
    app.run_server(debug=True)
