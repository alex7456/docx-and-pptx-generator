import wikipedia
from docx import Document
from pptx import Presentation
import re
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
wikipedia.set_lang("ru")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ ---
def get_clean_article(title):
    try:
        page = wikipedia.page(title)
        text = page.content

        # –£–¥–∞–ª—è–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ "== –°–º. —Ç–∞–∫–∂–µ =="
        text = re.split(r"==\s*–°–º\. —Ç–∞–∫–∂–µ\s*==", text)[0]

        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–°—Å—ã–ª–∫–∏"
        text = re.sub(r"==\s*(–ü—Ä–∏–º–µ—á–∞–Ω–∏—è|–°—Å—ã–ª–∫–∏).*", "", text, flags=re.DOTALL)

        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ "== –†–∞–∑–¥–µ–ª ==" –Ω–∞ –ø—Ä–æ—Å—Ç–æ "–†–∞–∑–¥–µ–ª"
        text = re.sub(r"==+\s*(.*?)\s*==+", r"\1", text)

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\n{2,}', '\n\n', text).strip()

        return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return None

# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
def structure_text(text):
    paragraphs = text.split('\n\n')

    # –í–≤–µ–¥–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–≤—ã–µ 2 –∞–±–∑–∞—Ü–∞
    intro = '\n\n'.join(paragraphs[:2])

    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-2 –∞–±–∑–∞—Ü–∞
    conclusion = '\n\n'.join(paragraphs[-2:])

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ‚Äî –≤—Å—ë –º–µ–∂–¥—É –Ω–∏–º–∏
    middle = paragraphs[2:-2]
    section_size = max(1, len(middle) // 8)
    sections = [
        '\n\n'.join(middle[i:i+section_size]) for i in range(0, len(middle), section_size)
    ][:8]  # –º–∞–∫—Å–∏–º—É–º 8 —Ä–∞–∑–¥–µ–ª–æ–≤

    return {
        "intro": intro,
        "sections": sections,
        "conclusion": conclusion
    }

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫–ª–∞–¥–∞ ---
def generate_report(title, structured):
    doc = Document()
    doc.add_heading(title, 0)

    doc.add_heading("–í–≤–µ–¥–µ–Ω–∏–µ", level=1)
    doc.add_paragraph(structured["intro"])

    doc.add_heading("–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", level=1)
    for i, section in enumerate(structured["sections"], start=1):
        doc.add_heading(f"–†–∞–∑–¥–µ–ª {i}", level=2)
        doc.add_paragraph(section)

    doc.add_heading("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", level=1)
    doc.add_paragraph(structured["conclusion"])

    filename = f"{title}_report.docx"
    doc.save(filename)
    print(f"‚úÖ –î–æ–∫–ª–∞–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.abspath(filename)}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ---
def generate_presentation(title, structured):
    prs = Presentation()

    # –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = title
    slide.placeholders[1].text = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"

    # –°–ª–∞–π–¥—ã 2-9: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    for i, section in enumerate(structured["sections"], start=1):
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = f"–†–∞–∑–¥–µ–ª {i}"
        slide.placeholders[1].text = section[:800]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ

    # –°–ª–∞–π–¥ 10: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ"
    slide.placeholders[1].text = structured["conclusion"]

    filename = f"{title}_presentation.pptx"
    prs.save(filename)
    print(f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {os.path.abspath(filename)}")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def generate_all(topic):
    print(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic}")
    article = get_clean_article(topic)
    if not article:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é.")
        return

    structured = structure_text(article)
    generate_report(topic, structured)
    generate_presentation(topic, structured)

# --- –ó–∞–ø—É—Å–∫ ---
# –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Ç–µ–º—É
topic = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É: ")
generate_all(topic)
